---
- name: Daemon reload systemd in case the binaries upgraded
  ansible.builtin.systemd_service:
    daemon_reload: true
  become: true
  when: ansible_service_mgr == "systemd"
  listen: reload systemd daemon

- name: Restart consul on Unix
  become: true
  ansible.builtin.service:
    name: "{{ consul_systemd_service_name }}"
    state: restarted
    # Needed to force SysV service manager on Docker for Molecule tests
    use: "{{ ansible_service_mgr }}"
  when:
    - not consul_rolling_restart | bool
    - ansible_os_family != "Darwin"
    - ansible_os_family != "Windows"
  listen: restart consul

- name: Rolling restart consul on Unix
  # Manual loop on playbook hosts to perform a "serial: 1" equivalent on a set of task
  ansible.builtin.include_tasks: ../tasks/leave_restart_consul.yml
  with_items: "{{ play_hosts }}"
  loop_control:
    loop_var: rolling_restart_host
  when:
    - consul_rolling_restart | bool
    - inventory_hostname == play_hosts[0]
    - ansible_os_family != "Darwin"
    - ansible_os_family != "Windows"
  listen: restart consul

- name: Restart consul on Mac
  ansible.builtin.include_tasks: "{{ role_path }}/handlers/restart_consul_mac.yml"
  when: ansible_os_family == "Darwin"
  listen: restart consul

- name: Restart consul on Windows
  ansible.windows.win_service:
    name: "{{ consul_systemd_service_name }}"
    state: restarted
  # Some tasks with `become: true` end up calling this task. Unfortunately, the `become`
  # property is evaluated before the `when` condition and this results in an Ansible
  # error.
  become: false
  when: ansible_os_family == "Windows"
  register: windows_service_started
  retries: 3
  delay: 1
  until: windows_service_started is succeeded
  listen: restart consul
