---
# Gathers facts (bind address) from servers not currently targeted.
# 'delegate_facts' is currently rather buggy in Ansible so this might not
# always work. Hence 'consul_gather_server_facts' defaults to 'no'.
- name: Gather facts from other servers
  ansible.builtin.setup:
  delegate_to: "{{ host_item }}"
  delegate_facts: true
  with_items: "{{ consul_servers | difference(play_hosts) }}"
  loop_control:
    loop_var: host_item
  run_once: true
  when: consul_gather_server_facts | bool

- name: Expose advertise_address(_wan) datacenter and node_role as facts
  ansible.builtin.set_fact:
    consul_advertise_address_wan: "{{ consul_advertise_address_wan }}"
    consul_advertise_address: "{{ consul_advertise_address }}"
    consul_bind_address: "{{ consul_bind_address }}"
    consul_datacenter: "{{ consul_datacenter }}"
    consul_node_role: "{{ consul_node_role }}"

- name: Read bootstrapped state
  ansible.builtin.stat:
    path: "{{ consul_bootstrap_state }}"
  register: bootstrap_state
  ignore_errors: true
  tags: always

- name: Include user and group settings
  ansible.builtin.import_tasks:
    file: user_group.yml

- name: Install OS packages and consul - from the repository
  ansible.builtin.include_tasks:
    file: install_linux_repo.yml
  when: consul_install_from_repo | bool

- name: Include directory settings
  ansible.builtin.import_tasks:
    file: dirs.yml

- name: Check for existing Consul binary
  ansible.builtin.stat:
    path: "{{ consul_binary }}"
  register: consul_binary_installed
  when: not consul_force_install

- name: Get current Consul version
  ansible.builtin.command: "{{ consul_binary }} --version"
  check_mode: false
  changed_when: false
  when:
    - not consul_force_install
    - consul_binary_installed.stat.exists
  register: consul_installed_version

- name: Calculate whether to install consul binary
  ansible.builtin.set_fact:
    consul_install_binary: "{{ consul_force_install or not consul_binary_installed.stat.exists or consul_installed_version.stdout_lines[0] != _consul_expected_version_string
      }}"

- name: Install OS packages and consul - locally
  ansible.builtin.include_tasks:
    file: install.yml
  when:
    - consul_install_binary | bool
    - not consul_install_remotely | bool
    - not consul_install_from_repo | bool

- name: Install OS packages and consul - remotely
  ansible.builtin.include_tasks:
    file: install_remote.yml
  when:
    - consul_install_binary | bool
    - consul_install_remotely | bool
    - not consul_install_from_repo | bool

- name: Configure gossip encryption key
  when: consul_encrypt_enable | bool
  block:
    - name: Save existing gossip encryption key
      when:
        - consul_raw_key is not defined
        - bootstrap_state.stat.exists | bool
        - inventory_hostname in consul_servers
      block:
        - name: Check for gossip encryption key on previously boostrapped server
          ansible.builtin.slurp:
            src: "{{ consul_config_path }}/config.json"
          register: consul_config_b64
          ignore_errors: true

        - name: Deserialize existing configuration
          ansible.builtin.set_fact:
            consul_config: "{{ consul_config_b64.content | b64decode | from_json }}"
          when: consul_config_b64.content is defined

        - name: Save gossip encryption key from existing configuration
          ansible.builtin.set_fact:
            consul_raw_key: "{{ consul_config.encrypt }}"
          no_log: true
          when: consul_config is defined

    - name: Create temporary file for raw gossip encryption key
      delegate_to: localhost
      ansible.builtin.tempfile:
        suffix: .key
      become: false
      vars:
        ansible_become: false
      run_once: true
      changed_when: false
      check_mode: false
      register: consul_raw_key_file

    # Key provided by extra vars or the above block
    - name: Write gossip encryption key locally for use with new servers
      ansible.builtin.copy:
        content: "{{ consul_raw_key }}"
        dest: "{{ consul_raw_key_file.path }}"
        mode: "0600"
      become: false
      vars:
        ansible_become: false
      delegate_to: localhost
      run_once: true
      changed_when: false
      when: consul_raw_key is defined

    - name: Generate new gossip encryption key if none was found
      run_once: true
      when:
        - consul_raw_key is not defined
        - not bootstrap_state.stat.exists | bool
      block:
        - name: Create temporary file to receive gossip encryption key
          become: false
          ansible.builtin.tempfile:
            state: file
          register: gossip_key_tempfile

        - name: Generate gossip encryption key # noqa no-changed-when
          ansible.builtin.shell: PATH={{ consul_bin_path }}:$PATH consul keygen > {{ gossip_key_tempfile.path }}
          register: consul_keygen

        - name: Fetch key locally to share with other nodes
          become: false
          ansible.builtin.fetch:
            src: "{{ gossip_key_tempfile.path }}"
            dest: "{{ consul_raw_key_file.path }}"
            flat: true

      always:
        - name: Clean up temporary file
          become: false
          ansible.builtin.file:
            path: "{{ gossip_key_tempfile.path }}"
            state: absent
          when: gossip_key_tempfile is defined

    - name: Read gossip encryption key for servers that require it
      ansible.builtin.set_fact:
        consul_raw_key: "{{ lookup('file', consul_raw_key_file.path) }}"
      no_log: true
      when: consul_raw_key is not defined

    - name: Delete gossip encryption key file
      ansible.builtin.file:
        path: "{{ consul_raw_key_file.path }}"
        state: absent
      become: false
      vars:
        ansible_become: false
      run_once: true
      delegate_to: localhost
      changed_when: false

- name: Create ACL configuration
  ansible.builtin.include_tasks:
    file: acl.yml
  when: consul_acl_enable | bool

- name: Create Consul configuration
  ansible.builtin.import_tasks:
    file: config.yml

- name: Create TLS configuration
  ansible.builtin.include_tasks:
    file: tls.yml
  when: consul_tls_enable | bool

- name: Create syslog configuration
  ansible.builtin.import_tasks:
    file: syslog.yml

- name: Create BSD init script
  ansible.builtin.template:
    src: consul_bsdinit.j2
    dest: /etc/rc.d/consul
    owner: root
    group: wheel
    mode: "0755"
  when: ansible_os_family == "FreeBSD"

- name: Create SYSV init script
  ansible.builtin.template:
    src: consul_sysvinit.j2
    dest: /etc/init.d/consul
    owner: root
    group: root
    mode: "0755"
  when:
    - not ansible_service_mgr == "systemd"
    - not ansible_os_family == "Debian"
    - not ansible_os_family == "FreeBSD"
    - not ansible_os_family == "Solaris"
    - not ansible_os_family == "Darwin"

- name: Create Debian init script
  ansible.builtin.template:
    src: consul_debianinit.j2
    dest: /etc/init.d/consul
    owner: root
    group: root
    mode: "0755"
  when:
    - not ansible_service_mgr == "systemd"
    - ansible_os_family == "Debian"
    - not ansible_os_family == "FreeBSD"
    - not ansible_os_family == "Solaris"
    - not ansible_os_family == "Darwin"

- name: Create systemd script
  ansible.builtin.template:
    src: consul_systemd.service.j2
    dest: "{{ consul_systemd_unit_path }}/{{ consul_systemd_service_name }}.service"
    owner: root
    group: root
    mode: "0644"
  register: systemd_unit
  notify: restart consul
  when:
    - ansible_service_mgr == "systemd"
    - not ansible_os_family == "FreeBSD"
    - not ansible_os_family == "Solaris"
    - not ansible_os_family == "Darwin"
    - not consul_install_from_repo | bool

- name: Reload systemd # noqa no-handler
  ansible.builtin.systemd_service:
    daemon_reload: true
  when: systemd_unit is changed

- name: Enable consul at startup (systemd)
  ansible.builtin.systemd_service:
    name: "{{ consul_systemd_service_name }}"
    enabled: true
  when:
    - ansible_service_mgr == "systemd"
    - not ansible_os_family == "FreeBSD"
    - not ansible_os_family == "Solaris"
    - not ansible_os_family == "Darwin"

- name: Create launchctl plist file
  ansible.builtin.template:
    src: consul_launchctl.plist.j2
    dest: "{{ consul_launchctl_plist }}"
    mode: "0644"
    validate: plutil -lint %s
  when: ansible_os_family == "Darwin"
  notify: restart consul

- name: Create smf manifest
  ansible.builtin.template:
    src: consul_smf_manifest.j2
    dest: "{{ consul_smf_manifest }}"
    owner: root
    group: root
    mode: "0644"
  when: ansible_os_family == "Solaris"
  register: smfmanifest

- name: Import smf manifest
  ansible.builtin.shell: svccfg import {{ consul_smf_manifest }}
  when:
    - smfmanifest is changed
    - ansible_os_family == "Solaris"
  tags: skip_ansible_lint
- name: Import smf script
  ansible.builtin.shell:
    cmd: svcadm refresh consul
  when:
    - smfmanifest is changed
    - ansible_os_family == "Solaris"
  tags: skip_ansible_lint

- name: Enable Consul Snapshots on servers
  ansible.builtin.include_tasks:
    file: snapshot.yml
  when:
    - ansible_service_mgr == "systemd"
    - not ansible_os_family == "FreeBSD"
    - not ansible_os_family == "Solaris"
    - not ansible_os_family == "Darwin"
    - consul_snapshot | bool

- name: Start consul service
  when:
    - not bootstrap_state.stat.exists
    - not ansible_os_family == "Darwin"
  block:
    - name: Start Consul
      ansible.builtin.service:
        name: "{{ consul_systemd_service_name }}"
        state: started
        enabled: true
        # Needed to force SysV service manager on Docker for Molecule tests
        use: "{{ ansible_service_mgr }}"

    - name: Check Consul HTTP API (via TCP socket)
      ansible.builtin.wait_for:
        delay: 15
        port: "{{ consul_ports.http | int }}"
        host: "{{ consul_addresses.http }}"
      when: (consul_ports.http | int > -1) and (consul_addresses.http | ansible.utils.ipaddr)

    - name: Check Consul HTTP API (via unix socket)
      ansible.builtin.wait_for:
        delay: 15
        path: "{{ consul_addresses.http | replace('unix://', '', 1) }}"
      when: consul_addresses.http is match("unix://*")

    - name: Create bootstrapped state file
      ansible.builtin.file:
        dest: "{{ consul_bootstrap_state }}"
        state: touch
        mode: "0600"

    - name: Configure iptables
      ansible.builtin.include_tasks:
        file: ../tasks/iptables.yml
      when: consul_iptables_enable | bool

- name: Configure dnsmasq
  ansible.builtin.include_tasks:
    file: ../tasks/dnsmasq.yml
  when: consul_dnsmasq_enable | bool
