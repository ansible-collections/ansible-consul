---
# File: acl.yml - ACL tasks for Consul
- name: Read generated ACL master token
  when:
    - bootstrap_state.stat.exists | bool
    - (consul_acl_master_token is not defined or consul_acl_master_token | length == 0)
    - consul_node_role == 'server'
  block:
    - name: Read ACL master token from previously boostrapped server
      ansible.builtin.command:
        cmd: "cat {{ consul_config_path }}/config.json"
      register: config_read
      no_log: true
      changed_when: false
      run_once: true

    - name: Save acl_master_token from existing configuration
      ansible.builtin.set_fact:
        consul_acl_master_token: "{{ config_read.stdout | from_json | json_query(query) }}"
      vars:
        query: "acl.tokens.master"
      no_log: true

    - name: Save acl_initial_management from existing configuration if acl_master_token not found
      ansible.builtin.set_fact:
        consul_acl_master_token: "{{ config_read.stdout | from_json | json_query(query) }}"
      vars:
        query: "acl.tokens.initial_management"
      no_log: true
      when: consul_acl_master_token | length == 0

- name: Generate ACL master token
  when:
    - (consul_acl_master_token is not defined or consul_acl_master_token | length == 0)
    - not bootstrap_state.stat.exists | bool
    - consul_node_role == 'server'
  block:
    - name: Generate ACL master token  # noqa no-changed-when
      ansible.builtin.command:
        cmd: "echo {{ lookup('password', '/dev/null length=32 chars=ascii_letters') | to_uuid }}"
      register: consul_acl_master_token_keygen
      run_once: true
      no_log: true

    - name: Save ACL master token
      ansible.builtin.set_fact:
        consul_acl_master_token: "{{ consul_acl_master_token_keygen.stdout }}"
      no_log: true

- name: Display ACL Master Token
  ansible.builtin.debug:
    msg: "{{ consul_acl_master_token }}"
  run_once: true
  when:
    - consul_acl_master_token_display | bool
    - consul_node_role == 'server'

- name: Read and save generated ACL replication token
  when:
    - bootstrap_state.stat.exists | bool
    - (consul_acl_replication_token is not defined or consul_acl_replication_token | length == 0)
    - consul_node_role == 'server'
  block:
    - name: Read ACL master token from previously boostrapped server
      ansible.builtin.command:
        cmd: "cat {{ consul_config_path }}/config.json"
      register: config_read
      no_log: true
      changed_when: false
      run_once: true

    - name: Save acl_replication_token from existing configuration
      ansible.builtin.set_fact:
        consul_acl_replication_token: "{{ config_read.stdout | from_json | json_query(query) }}"
      vars:
        query: "acl.tokens.replication"
      no_log: true

- name: Generate and save ACL replication token
  when:
    - (consul_acl_replication_token is not defined or consul_acl_replication_token | length == 0)
    - not bootstrap_state.stat.exists | bool
    - consul_node_role == 'server'
  block:
    - name: Generate ACL replication token  # noqa no-changed-when
      ansible.builtin.command:
        cmd: "echo {{ lookup('password', '/dev/null length=32 chars=ascii_letters') | to_uuid }}"
      register: consul_acl_replication_token_keygen
      no_log: true
      run_once: true

    - name: Save ACL replication token
      ansible.builtin.set_fact:
        consul_acl_replication_token: "{{ consul_acl_replication_token_keygen.stdout }}"
      no_log: true

- name: Create ACL policy configuration
  ansible.builtin.template:
    src: configd_50acl_policy.hcl.j2
    dest: "{{ consul_configd_path }}/50acl_policy.hcl"
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
    mode: 0600
  notify:
    - restart consul
  when: consul_acl_policy | bool
